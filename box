#!/usr/bin/env zsh
emulate -L zsh
#setopt xtrace
setopt err_exit

autoload -U throw
trap 'echo "Command returned nonzero exit code" >&2; throw NonZeroExitError' ZERR

typeset -A retval_kv
typeset -i retval_i
typeset retval

# TODO: Add a facility for unloading these.
zmodload -F zsh/parameter +p:commands
autoload -U catch

typeset -r PROGNAME="${0##*/}"

typeset -r BOX_HOME="$HOME/src/box"
typeset -a box_path
box_path=( "$BOX_HOME/tools" )

typeset box_userdir="$HOME/.box"
[[ -d "$box_userdir" && -f "$box_userdir/config" ]] && source "$box_userdir/config"

function _box_define_assert {
	if [[ $# -ne 1 ]]; then
		echo "Assertion failed generating assert" >&2
		throw AssertionError
	fi
	functions assert >/dev/null && unset -f assert
	eval "function assert {
		if ! eval \"\$*\"; then
			echo \"Assertion failed during $1\" >&2
			throw AssertionError
		fi
	}"
}

_box_define_assert bootstrap

typeset -a _box_loaded_tools
typeset -a _box_tool_destructors

function _box_is_defined {
	assert "[[ $# -eq 1 ]]"
	(( ${+functions[$1]} ))
}

function _box_run_if_defined {
	assert "[[ $# -eq 1 ]]"
	_box_is_defined "$1" && "$1"
	return 0
}

function _box_tool_constructor {
	assert "[[ $# -eq 1 ]]"
	typeset toolname="${1##*/}" toolfile="$1"
	assert "[[ -f \"$toolfile\" ]]"

	source "$toolfile"
	_box_loaded_tools+=( "$toolname" )
	_box_run_if_defined "${toolname}_constructor"
	if ! _box_is_defined "${toolname}_help"; then
		function ${toolname}_help {
			retval=()
		}
	fi
	return 0
}

function _box_tool_loaded {
	assert "[[ $# -eq 1 ]]"
	(( ${+_box_loaded_tools[(r)*${1}]} ))
}

function _box_tool_destructor {
	assert "[[ $# -eq 1 ]]"
	_box_run_if_defined "${_box_loaded_tools[$1]}_destructor"
	$_box_tool_destructors[$1]
	[[ $_box_loaded_tools[$1] == "assert" ]] && _box_define_assert shutdown
	_box_tool_destructors[$1]=()
	_box_loaded_tools[$1]=()
}

# Global Functions
function all_in_path {
	assert "[[ $# -eq 1 ]]"
	assert "(( ${(P)+${1}} ))"
	typeset -a target
	target=( ${(P)${1}[@]} )
	typeset -a path
	typeset -A saved_commands
	saved_commands=( ${(kv)commands} )
	path=( $target )
	hash -f
	retval_kv=( ${(kv)commands} )
	commands=( ${(kv)saved_commands} )
}

function path_search {
	assert "[[ $# -eq 2 ]]"
	all_in_path "$1"
	(( $+retval_kv[$2] )) || return 1
	retval=( $retval_kv[$2] )
}

function grab {
	assert "[[ $# -ne 0 ]]"
	assert "[[ -n \"$*\" ]]"
	typeset tool
	for tool in "$@"; do
		[[ -z "$tool" ]] && return 1
		_box_tool_loaded "$tool" && continue
		path_search box_path "$tool" || return 1
		_box_tool_constructor "$retval" || return 1
	done
}

function exit {
	unsetopt xtrace
	unset -f exit
	trap 'echo "Error during exit" >&2; throw NonZeroExitError' ZERR
	assert "[[ $# -le 1 ]]"
	typeset -i i
	for (( i = $#_box_loaded_tools; i > 0; i-- )); do
		_box_tool_destructor $i
	done
	exit ${1:-0}
}
# End Global Functions

trap 'exit $?' EXIT

grab messages
trap 'error "Command returned nonzero exit code"; throw NonZeroExitError' ZERR
grab assert

zmodload -F zsh/zutil +b:zparseopts
zparseopts -K -D d=debug -debug=debug

if [[ $PROGNAME == "box" ]]; then
	zparseopts -E -K -D h=help -help=help

	[[ "$1" == "help" ]] && typeset help
	if (( $+help )); then
		grab help
		usage
		echo
		help
		exit
	fi

	if [[ -z "$1" ]] || ! grab "$1"; then
		grab help
		usage >&2
		throw InvalidInvocationException
	fi
	if ! _box_is_defined "$1"; then
		error "Module $1 not runnable"
		throw NotRunnableException
	fi
	(( $+debug )) && setopt xtrace
	"$@"
else
	typeset module="${0##*/}"
	grab $module
	if ! _box_is_defined "$module"; then
		error "Module $module not runnable"
		throw NotRunnableException
	fi
	(( $+debug )) && setopt xtrace
	$module "$@"
	(( $+debug )) && unsetopt xtrace
	unset module
fi
